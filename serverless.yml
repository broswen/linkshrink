service: linkshrink

frameworkVersion: "2"

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-step-functions

provider:
  name: aws
  region: us-east-1

  stage: ${opt:stage, 'dev'}

  apiGateway:
    apiKeys:
      - linkshrink-test
    usagePlan:
      throttle:
        burstLimit: 5
        rateLimit: 1

  runtime: nodejs12.x
  memorySize: 128
  timeout: 3

  lambdaHashingVersion: "20201221"

  iamRoleStatements:
    # - Effect: Allow
    #   Action:
    #     - s3:GetObject
    #     - s3:PutObject
    #   Resource:
    #     - !GetAtt ReportsBucket.Arn
    #     - !Join ["/", [!GetAtt ReportsBucket.Arn, "*"]]
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource: !GetAtt LinksTable.Arn
    - Effect: Allow
      Action:
        - kinesis:PutRecord
        - kinesis:PutRecords
      Resource: !GetAtt ClickEventsStream.Arn
    - Effect: Allow
      Action: secretsmanager:GetSecretValue
      Resource: ${file(serverless.${self:provider.stage}.yml):postgresSecretArn}

  environment:
    DBSECRET: ${file(serverless.${self:provider.stage}.yml):postgresSecretArn}
    STAGE: ${self:provider.stage}
    LINKSTABLE: !Ref LinksTable
    CLICKEVENTSSTREAM: !Ref ClickEventsStream

functions:
  CreateLink:
    handler: src/lambdas/CreateLink.handler
    events:
      - http:
          path: /link
          method: post
          private: true
  GetLink:
    handler: src/lambdas/GetLink.handler
    events:
      - http:
          path: /{slug}
          method: get
  GetLinkInfo:
    handler: src/lambdas/GetLinkInfo.handler
    events:
      - http:
          path: /link/{slug}
          method: get
          private: true
  GetLinkStats:
    handler: src/lambdas/GetLinkStats.handler
    events:
      - http:
          path: /link/{slug}/stats
          method: get
          private: true
    vpc:
      subnetIds: ${file(./serverless.${self:provider.stage}.yml):subnets}
      securityGroupIds:
        - !Ref LambdaSecurityGroup
  # CreateLinkReport:
  #   handler: src/lambdas/CreateLinkReport.handler
  #   events:
  #     - http:
  #         path: /link/{slug}/report
  #         method: post

  IngestClickEvents:
    handler: src/lambdas/IngestClickEvents.handler
    events:
      - stream:
          type: kinesis
          arn: !GetAtt ClickEventsStream.Arn
    vpc:
      subnetIds: ${file(./serverless.${self:provider.stage}.yml):subnets}
      securityGroupIds:
        - !Ref LambdaSecurityGroup

  # StartReport:
  #   handler: src/lambdas/report/StartReport.handler
  #   vpc:
  #     subnetIds: ${file(./serverless.${self:provider.stage}.yml):subnets}
  #     securityGroupIds:
  #       - !Ref LambdaSecurityGroup
  # GenerateReport:
  #   handler: src/lambdas/report/GenerateReport.handler
  #   vpc:
  #     subnetIds: ${file(./serverless.${self:provider.stage}.yml):subnets}
  #     securityGroupIds:
  #       - !Ref LambdaSecurityGroup
  # StopReport:
  #   handler: src/lambdas/report/GenerateReport.handler
  #   vpc:
  #     subnetIds: ${file(./serverless.${self:provider.stage}.yml):subnets}
  #     securityGroupIds:
  #       - !Ref LambdaSecurityGroup

resources:
  - ${file(./cfn-resources/s3-resources.yml)}
  - ${file(./cfn-resources/iam-resources.yml)}
  - ${file(./cfn-resources/dynamodb-resources.yml)}
  - ${file(./cfn-resources/kinesis-resources.yml)}
  - ${file(./cfn-resources/rds-resources.yml)}
  - ${file(./cfn-resources/vpc-resources.yml)}
